"use strict";(self.webpackChunkfe_study=self.webpackChunkfe_study||[]).push([[796],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(t),f=o,h=p["".concat(i,".").concat(f)]||p[f]||d[f]||s;return t?r.createElement(h,a(a({ref:n},u),{},{components:t})):r.createElement(h,a({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=f;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},809:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const s={title:"\u4e00\u4e9b\u624b\u5199\u9898"},a=void 0,c={unversionedId:"\u624b\u5199\u9898/index",id:"\u624b\u5199\u9898/index",title:"\u4e00\u4e9b\u624b\u5199\u9898",description:"1.\u624b\u5199 Promise",source:"@site/docs/\u624b\u5199\u9898/index.md",sourceDirName:"\u624b\u5199\u9898",slug:"/\u624b\u5199\u9898/",permalink:"/festudy/docs/\u624b\u5199\u9898/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/\u624b\u5199\u9898/index.md",tags:[],version:"current",frontMatter:{title:"\u4e00\u4e9b\u624b\u5199\u9898"},sidebar:"tutorialSidebar",previous:{title:"\u524d\u8a00",permalink:"/festudy/docs/\u524d\u8a00"},next:{title:"case-study",permalink:"/festudy/docs/case-study/"}},i={},l=[{value:"1.\u624b\u5199 Promise",id:"1\u624b\u5199-promise",level:2}],u={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"1\u624b\u5199-promise"},"1.\u624b\u5199 Promise"),(0,o.kt)("p",null,"\u5f88\u7ecf\u5178\u7684\u9898\u76ee"),(0,o.kt)("p",null,'\u8fc4\u4eca\u4e3a\u6b62\uff0c\u4e2a\u4eba\u89c9\u5f97\u5199\u7684\u6700 "\u597d" \u7684\u7248\u672c'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\nfunction runMicroTask(callback) {\n  if (typeof queueMicrotask === 'function') {\n    queueMicrotask(callback);\n    return;\n  }\n\n  if (typeof MutationObserver === 'function') {\n    const observer = new MutationObserver(callback);\n    const textNode = document.createTextNode('');\n    observer.observe(textNode, {\n      characterData: true,\n    });\n    textNode.data = '1';\n    return;\n  }\n  // \u4e0d\u662f\u5fae\u4efb\u52a1\uff0c\u4f46\u662f\u662f\u6bd4\u5fae\u4efb\u52a1\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u4efb\u52a1\n  if (process && typeof process.nextTick === 'function') {\n    process.nextTick(callback);\n    return;\n  }\n  if (typeof setImmediate === 'function') {\n    setImmediate(callback);\n    return;\n  }\n  setTimeout(callback, 0);\n}\nfunction isPromise(obj) {\n  return !!(obj && typeof obj === 'object' && typeof obj.then === 'function');\n}\n\nclass Promise {\n  #state;\n  #value;\n  #handlers;\n  #cachePromise;\n  constructor(executor) {\n    this.#state = PENDING;\n    this.#value = null;\n    this.#handlers = [];\n    try {\n      executor(this.#resolve.bind(this), this.#reject.bind(this));\n    } catch (error) {\n      this.#reject(error);\n    }\n  }\n  then(onFulfilled, onRejected) {\n    this.#cachePromise = new Promise((resolve, reject) => {\n      this.#pushHandler(onFulfilled, FULFILLED, resolve, reject);\n      this.#pushHandler(onRejected, REJECTED, resolve, reject);\n      this.#runHandlers();\n    });\n    return this.#cachePromise;\n  }\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  finally(onFinally) {\n    return this.then(\n      (data) => {\n        onFinally();\n        return data;\n      },\n      (reason) => {\n        onFinally();\n        return reason;\n      }\n    );\n  }\n  #resolve(data) {\n    this.#changeState(FULFILLED, data);\n  }\n  #reject(reason) {\n    this.#changeState(REJECTED, reason);\n  }\n  #changeState(newState, value) {\n    if (this.#state !== PENDING) {\n      return;\n    }\n    if (newState === REJECTED) {\n      console.error(new Error(value));\n    }\n    this.#state = newState;\n    this.#value = value;\n    this.#runHandlers();\n  }\n  #pushHandler(executor, state, resolve, reject) {\n    this.#handlers.push({\n      executor,\n      state,\n      resolve,\n      reject,\n    });\n  }\n  #runHandlers() {\n    if (this.#state !== PENDING) {\n      return;\n    }\n    while (this.#handlers[0]) {\n      const handler = this.#handlers[0];\n      this.#runOneHandler(handler);\n      this.#handlers.shift();\n    }\n  }\n  #runOneHandler({ executor, state, resolve, reject }) {\n    runMicroTask(() => {\n      if (this.#state !== state) {\n        return;\n      }\n      if (typeof executor !== 'function') {\n        state === FULFILLED ? resolve(this.#value) : reject(this.#value);\n        return;\n      }\n      try {\n        const result = executor(this.#value);\n        if (isPromise(result)) {\n          if (result === this.#cachePromise) {\n            const error = new TypeError(\n              'Chaining cycle detected for promise #<Promise>'\n            );\n            reject(error);\n          } else {\n            result.then(resolve, reject);\n          }\n          return;\n        }\n        resolve(result);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  static resolve(value) {\n    if (value instanceof Promise) {\n      return value;\n    }\n    return new Promise((resolve, reject) => {\n      if (isPromise(value)) {\n        value.then(resolve, reject);\n      } else {\n        resolve(value);\n      }\n    });\n  }\n  static reject(reason) {\n    return new Promise((_, reject) => {\n      reject(reason);\n    });\n  }\n  static all(promises) {\n    return new Promise((resolve, reject) => {\n      try {\n        let count = 0;\n        let finishedCount = 0;\n        const result = [];\n        for (const promise of promises) {\n          let cur = count;\n          count++;\n          Promise.resolve(promise)\n            .then((data) => {\n              result[cur] = data;\n              finishedCount++;\n              if (finishedCount === count) {\n                resolve(result);\n              }\n            })\n            .catch(reject);\n        }\n        if (count === 0) {\n          resolve(result);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  static allSettled(promises) {\n    const ps = [];\n    try {\n      for (const promise of promises) {\n        ps.push(\n          Promise.resolve(promise).then(\n            (value) => ({ status: FULFILLED, value }),\n            (reason) => ({ status: REJECTED, reason })\n          )\n        );\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    return Promise.all(ps);\n  }\n  static race(promises) {\n    return new Promise((resolve, reject) => {\n      try {\n        for (const promise of promises) {\n          Promise.resolve(promise).then(resolve, reject);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n")))}d.isMDXComponent=!0}}]);