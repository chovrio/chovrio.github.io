"use strict";(self.webpackChunkfe_study=self.webpackChunkfe_study||[]).push([[796],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>p});var t=r(7294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var a=t.createContext({}),l=function(e){var n=t.useContext(a),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(a.Provider,{value:n},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,o=e.originalType,a=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),f=l(r),h=s,p=f["".concat(a,".").concat(h)]||f[h]||d[h]||o;return r?t.createElement(p,c(c({ref:n},u),{},{components:r})):t.createElement(p,c({ref:n},u))}));function p(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=r.length,c=new Array(o);c[0]=h;var i={};for(var a in n)hasOwnProperty.call(n,a)&&(i[a]=n[a]);i.originalType=e,i[f]="string"==typeof e?e:s,c[1]=i;for(var l=2;l<o;l++)c[l]=r[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}h.displayName="MDXCreateElement"},809:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=r(7462),s=(r(7294),r(3905));const o={title:"\u4e00\u4e9b\u624b\u5199\u9898"},c=void 0,i={unversionedId:"\u624b\u5199\u9898/index",id:"\u624b\u5199\u9898/index",title:"\u4e00\u4e9b\u624b\u5199\u9898",description:"1.\u624b\u5199 Promise",source:"@site/docs/\u624b\u5199\u9898/index.md",sourceDirName:"\u624b\u5199\u9898",slug:"/\u624b\u5199\u9898/",permalink:"/festudy/docs/\u624b\u5199\u9898/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/\u624b\u5199\u9898/index.md",tags:[],version:"current",frontMatter:{title:"\u4e00\u4e9b\u624b\u5199\u9898"},sidebar:"tutorialSidebar",previous:{title:"Javascript",permalink:"/festudy/docs/js/"},next:{title:"anything",permalink:"/festudy/docs/anything/"}},a={},l=[{value:"1.\u624b\u5199 Promise",id:"1\u624b\u5199-promise",level:2}],u={toc:l},f="wrapper";function d(e){let{components:n,...r}=e;return(0,s.kt)(f,(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"1\u624b\u5199-promise"},"1.\u624b\u5199 Promise"),(0,s.kt)("p",null,"\u5f88\u7ecf\u5178\u7684\u9898\u76ee"),(0,s.kt)("p",null,'\u8fc4\u4eca\u4e3a\u6b62\uff0c\u4e2a\u4eba\u89c9\u5f97\u5199\u7684\u6700 "\u597d" \u7684\u7248\u672c(\u4f46\u662f\u9b54\u6539\u4e86\u4e0d\u7b26\u5408 promsie A+\u89c4\u8303)'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\nfunction runMicroTask(callback) {\n  if (typeof queueMicrotask === 'function') {\n    queueMicrotask(callback);\n    return;\n  }\n\n  if (typeof MutationObserver === 'function') {\n    const observer = new MutationObserver(callback);\n    const textNode = document.createTextNode('');\n    observer.observe(textNode, {\n      characterData: true,\n    });\n    textNode.data = '1';\n    return;\n  }\n  // \u4e0d\u662f\u5fae\u4efb\u52a1\uff0c\u4f46\u662f\u662f\u6bd4\u5fae\u4efb\u52a1\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u4efb\u52a1\n  if (process && typeof process.nextTick === 'function') {\n    process.nextTick(callback);\n    return;\n  }\n  if (typeof setImmediate === 'function') {\n    setImmediate(callback);\n    return;\n  }\n  setTimeout(callback, 0);\n}\nfunction isPromise(obj) {\n  return !!(obj && typeof obj === 'object' && typeof obj.then === 'function');\n}\n\nclass Promise {\n  #state;\n  #value;\n  #handlers;\n  #cachePromise;\n  constructor(executor) {\n    this.#state = PENDING;\n    this.#value = null;\n    this.#handlers = [];\n    try {\n      executor(this.#resolve.bind(this), this.#reject.bind(this));\n    } catch (error) {\n      this.#reject(error);\n    }\n  }\n  then(onFulfilled, onRejected) {\n    this.#cachePromise = new Promise((resolve, reject) => {\n      this.#pushHandler(onFulfilled, FULFILLED, resolve, reject);\n      this.#pushHandler(onRejected, REJECTED, resolve, reject);\n      this.#runHandlers();\n    });\n    return this.#cachePromise;\n  }\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  finally(onFinally) {\n    return this.then(\n      (data) => {\n        onFinally();\n        return data;\n      },\n      (reason) => {\n        onFinally();\n        return reason;\n      }\n    );\n  }\n  #resolve(data) {\n    this.#changeState(FULFILLED, data);\n  }\n  #reject(reason) {\n    this.#changeState(REJECTED, reason);\n  }\n  #changeState(newState, value) {\n    if (this.#state !== PENDING) {\n      return;\n    }\n    if (newState === REJECTED) {\n      console.error(new Error(value));\n    }\n    this.#state = newState;\n    this.#value = value;\n    this.#runHandlers();\n  }\n  #pushHandler(executor, state, resolve, reject) {\n    this.#handlers.push({\n      executor,\n      state,\n      resolve,\n      reject,\n    });\n  }\n  #runHandlers() {\n    if (this.#state === PENDING) {\n      return;\n    }\n    while (this.#handlers[0]) {\n      const handler = this.#handlers[0];\n      this.#runOneHandler(handler);\n      this.#handlers.shift();\n    }\n  }\n  #runOneHandler({ executor, state, resolve, reject }) {\n    runMicroTask(() => {\n      if (this.#state !== state) {\n        return;\n      }\n      if (typeof executor !== 'function') {\n        state === FULFILLED ? resolve(this.#value) : reject(this.#value);\n        return;\n      }\n      try {\n        const result = executor(this.#value);\n        if (isPromise(result)) {\n          if (result === this.#cachePromise) {\n            const error = new TypeError(\n              'Chaining cycle detected for promise #<Promise>'\n            );\n            reject(error);\n          } else {\n            result.then(resolve, reject);\n          }\n          return;\n        }\n        resolve(result);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  static resolve(value) {\n    if (value instanceof Promise) {\n      return value;\n    }\n    return new Promise((resolve, reject) => {\n      if (isPromise(value)) {\n        value.then(resolve, reject);\n      } else {\n        resolve(value);\n      }\n    });\n  }\n  static reject(reason) {\n    return new Promise((_, reject) => {\n      reject(reason);\n    });\n  }\n  static all(promises) {\n    return new Promise((resolve, reject) => {\n      try {\n        let count = 0;\n        let finishedCount = 0;\n        const result = [];\n        for (const promise of promises) {\n          let cur = count;\n          count++;\n          Promise.resolve(promise)\n            .then((data) => {\n              result[cur] = data;\n              finishedCount++;\n              if (finishedCount === count) {\n                resolve(result);\n              }\n            })\n            .catch(reject);\n        }\n        if (count === 0) {\n          resolve(result);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  static allSettled(promises) {\n    const ps = [];\n    try {\n      for (const promise of promises) {\n        ps.push(\n          Promise.resolve(promise).then(\n            (value) => ({ status: FULFILLED, value }),\n            (reason) => ({ status: REJECTED, reason })\n          )\n        );\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    return Promise.all(ps);\n  }\n  static race(promises) {\n    return new Promise((resolve, reject) => {\n      try {\n        for (const promise of promises) {\n          Promise.resolve(promise).then(resolve, reject);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n")),(0,s.kt)("p",null,"\u7b26\u5408 promise A+\u89c4\u8303\u7684"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const PENDING = 'pending';\nconst FULFILLED = 'fulfilled';\nconst REJECTED = 'rejected';\n\nclass Promise {\n  #state;\n  #value;\n  #reason;\n  #resolvedCallbacks;\n  #rejectedCallbacks;\n  constructor(executor) {\n    this.#state = PENDING; // \u5931\u8d25\u7684\u503c\n    this.#value = undefined; // \u6210\u529f\u7684\u503c\n    this.#reason = undefined; // \u5931\u8d25\u7684\u503c\n    this.#resolvedCallbacks = []; // \u6210\u529f\u7684\u56de\u8c03\n    this.#rejectedCallbacks = []; // \u5931\u8d25\u7684\u56de\u8c03\n    try {\n      executor(this.#resolve.bind(this), this.#reject.bind(this));\n    } catch (error) {\n      this.#reject(error);\n    }\n  }\n  #resolve(value) {\n    if (this.#state === PENDING) {\n      this.#state = FULFILLED;\n      this.#value = value;\n      while (this.#resolvedCallbacks.length > 0) {\n        this.#resolvedCallbacks.shift().call(undefined);\n      }\n    }\n  }\n  #reject(reason) {\n    if (this.#state === PENDING) {\n      this.#state = REJECTED;\n      this.#reason = reason;\n      while (this.#rejectedCallbacks.length > 0) {\n        this.#rejectedCallbacks.shift().call(undefined);\n      }\n    }\n  }\n  then(onFulfilled, onRejected) {\n    onFulfilled =\n      typeof onFulfilled === 'function' ? onFulfilled : (value) => value;\n    onRejected =\n      typeof onRejected === 'function'\n        ? onRejected\n        : (reason) => {\n            throw reason;\n          };\n    const p2 = new Promise((resolve, reject) => {\n      if (this.#state === FULFILLED) {\n        runMicroTask(() => {\n          try {\n            const x = onFulfilled(this.#value);\n            resolvePromise(p2, x, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      } else if (this.#state === REJECTED) {\n        runMicroTask(() => {\n          try {\n            const x = onRejected(this.#reason);\n            resolvePromise(p2, x, resolve, reject);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      } else if (this.#state === PENDING) {\n        this.#resolvedCallbacks.push(() => {\n          runMicroTask(() => {\n            try {\n              const x = onFulfilled(this.#value);\n              resolvePromise(p2, x, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          });\n        });\n        this.#rejectedCallbacks.push(() => {\n          runMicroTask(() => {\n            try {\n              const x = onRejected(this.#reason);\n              resolvePromise(p2, x, resolve, reject);\n            } catch (error) {\n              reject(error);\n            }\n          });\n        });\n      }\n    });\n    return p2;\n  }\n  catch(onRejected) {\n    return this.then(undefined, onRejected);\n  }\n\n  static resolve(value) {\n    if (value instanceof Promise) {\n      return value;\n    }\n    return new Promise((resolve, reject) => {\n      if (isPromise(value)) {\n        value.then(resolve, reject);\n      } else {\n        resolve(value);\n      }\n    });\n  }\n  static reject(reason) {\n    return new Promise((_, reject) => {\n      reject(reason);\n    });\n  }\n  static all(promises) {\n    return new Promise((resolve, reject) => {\n      try {\n        let count = 0;\n        let finishedCount = 0;\n        const result = [];\n        for (const promise of promises) {\n          let cur = count;\n          count++;\n          Promise.resolve(promise).then((data) => {\n            result[cur] = data;\n            finishedCount++;\n            if (finishedCount === count) {\n              resolve(result);\n            }\n          }, reject);\n        }\n        if (count === 0) {\n          resolve(result);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  static allSettled(promises) {\n    const ps = [];\n    try {\n      for (const promise of promises) {\n        ps.push(\n          Promise.resolve(promise).then(\n            (value) => ({ status: FULFILLED, value }),\n            (reason) => ({ status: REJECTED, reason })\n          )\n        );\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    return Promise.all(ps);\n  }\n  static race(promises) {\n    return new Promise((resolve, reject) => {\n      try {\n        for (const promise of promises) {\n          Promise.resolve(promise).then(resolve, reject);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\nfunction runMicroTask(callback) {\n  if (typeof queueMicrotask === 'function') {\n    queueMicrotask(callback);\n    return;\n  }\n\n  if (typeof MutationObserver === 'function') {\n    const observer = new MutationObserver(callback);\n    const textNode = document.createTextNode('');\n    observer.observe(textNode, {\n      characterData: true,\n    });\n    textNode.data = '1';\n    return;\n  }\n  // \u4e0d\u662f\u5fae\u4efb\u52a1\uff0c\u4f46\u662f\u662f\u6bd4\u5fae\u4efb\u52a1\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u4efb\u52a1\n  if (process && typeof process.nextTick === 'function') {\n    process.nextTick(callback);\n    return;\n  }\n  if (typeof setImmediate === 'function') {\n    setImmediate(callback);\n    return;\n  }\n  setTimeout(callback, 0);\n}\n\nfunction resolvePromise(p2, x, resolve, reject) {\n  if (x === p2) {\n    reject(new TypeError('Chaining cycle detected for promise #<Promise>'));\n  } else if ((x !== null && typeof x === 'object') || typeof x === 'function') {\n    let called;\n    try {\n      let then = x.then;\n      if (typeof then === 'function') {\n        then.call(\n          x,\n          (y) => {\n            if (called) return;\n            called = true;\n            resolvePromise(p2, y, resolve, reject);\n          },\n          (r) => {\n            if (called) return;\n            called = true;\n            reject(r);\n          }\n        );\n      } else {\n        resolve(x);\n      }\n    } catch (error) {\n      if (called) return;\n      called = true;\n      reject(error);\n    }\n  } else {\n    resolve(x);\n  }\n}\nfunction isPromise(obj) {\n  return !!(obj && typeof obj === 'object' && typeof obj.then === 'function');\n}\nPromise.deferred = function () {\n  let result = {};\n  result.promise = new Promise((resolve, reject) => {\n    result.resolve = resolve;\n    result.reject = reject;\n  });\n  return result;\n};\nmodule.exports = Promise;\n")))}d.isMDXComponent=!0}}]);